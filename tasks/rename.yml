---
# role: filesystems
# file: tasks/rename.yml
#
# Tasks to rename either a Logical Volume or a mountpoint and update /etc/fstab
# accordingly.


# For each mount, these tasks are designed to be able to rename either the
# Logical Volume (lv) or the mountpoint (path), not both. This file is suitable
# for updating mounts when migrating from an implementation of a role to
# another.
#
# For example, when giving:
#filesystems__fslist:
#  path: /foo/bar
#  lv: foobar
#  vg: vg0
#
# and:
# * /dev/mapper/vg0-foobar is mounted on /foo/bar (the target state)
# then:
# > nothing to do
#
# or:
# * /dev/mapper/vg0-foobar is mounted on /foobar
# * /foo/bar is not a mountpoint
# then:
# > /foobar is unmounted and removed if empty
# > /dev/mapper/vg0-foobar is mounted on /foo/bar (the target state)
# > /etc/fstab is up-to-date
#
# or:
# * /dev/mapper/vg0-foo_bar is mounted on /foo/bar
# * /dev/mapper/vg0-foobar doesn't exist
# then:
# > /foo/bar is unmounted
# > LV foo_bar is renamed foobar
# > /dev/mapper/vg0-foobar is mounted on /foo/bar (the target state)
# > /etc/fstab is up-to-date
#
# or:
# * anything else
# then:
# > nothing to do


# _fs_rename_ is inherited from the parent tasks file and should have been set
# in cross-facts.yml
#
- name: "display the data structure we will play with for renaming"
  debug:
    var: _fs_rename_
    verbosity: 2


# Now we need to know if target devices already exist, or if target directories
# are already active mountpoints. We'll have to fail them.
#
- name: "stat paths that devices and mountpoints could be renamed to"
  stat:
    path: "{{ _fs_item.target }}"
  loop: "{{ _fs_rename_ }}"
  loop_control:
    loop_var: _fs_item
    label: {
      "old": "{{ _fs_item.source }}",
      "new": "{{ _fs_item.target }}"
      }
  register: _fs_rename_stat_


# Fail for invalid renaming cadidates:
# - target LV must not already exist
# - target dir is not an active mountpoint (gathered facts are required)
# - if target dir exists, it's an empty directory.
# - source directory doesn't contain an active submount that is not listed to
#   be renamed too. Wtf ! Example:
#   /srv/foo/bar is an active mountpoint
#   /srv/foo is an active mountpoint we want to rename (the directory or the
#   device). We can't unmount /srv/foo if /srv/foo/bar is still mounted.
#   * source directory doesn't contain active submount:
#     ansible_mounts | json_query('[*].mount') | select('search', '^%s/' % _stat_.results.{{ i }}.mount.old.dir) | list == []
#   * active submounts are listed to be renamed too:
#     _fs_rename_ | json_query('[*].mount') | intersect(submounts) == submounts
#   Note that this works in serial mode. In sequential mode, _fs_rename_ is a
#   list of one element, and can't contain submounts.
#
- name: "assert that the target of renaming is not already in use"
  assert:
    that: |
      [
        {% for i in range(0, _fs_rename_ | length) %}
        {% set s = __tempvar0__ | select('search', '^%s/' % _fs_rename_stat_.results[i]._fs_rename_item.old.dir) | list %}
        "{{ __tempvar1__ | sort }} | intersect({{ s | sort }}) == {{ s | sort }}",

        {% if _fs_rename_[i].type == "dev" %}
        'not _fs_rename_stat_.results.{{ i }}.stat.exists'

        {% elif _fs_rename_[i].type == "dir" %}
        '( not _fs_rename_stat_.results.{{ i }}.stat.exists ) or \
         ( _fs_rename_stat_.results.{{ i }}.stat.isdir and _fs_rename_stat_.results.{{ i }}.stat.nlink == "2" )',
        '_fs_rename_stat_.results.{{ i }}._fs_rename_item.target not in ansible_mounts | json_query("[*].mount")'
        {% endif %}{{ '' if loop.last else ',' }}
        {% endfor %}
      ]
  vars:
    __tempvar0__: "{{ ansible_mounts | json_query('[*].mount') }}"
    __tempvar1__: "{{ _fs_rename_ | json_query('[*].old.dir') }}"


# Of course, this means mounts are free of running processes.
# Unfortunately, we have to unmount devices even if it is possible to rename
# Logical Volumes on the fly, since some system tools (and so gathered facts)
# may fall in an out-of-sync and still display the old name of the device.
# This is the case, for example, of the `df` command.
#
- name: "unmount devices and directories to be renamed"
  mount:
    path: "{{ _fs_rename_item.old.dir }}"
    state: unmounted
  loop: "{{ _fs_rename_ | sort(attribute='old.dir') | reverse | list }}"
  loop_control:
    loop_var: _fs_rename_item
    label: "{{ _fs_rename_item.source }}"
  register: _fs_rename_unmount_
  notify:
    - validate_fstab


# Working on directories
#
- import_tasks: parents-unset.yml
  vars:
    __mountpoints__: |
      [
        {% for m in _fs_rename_unmount_.results if m is changed and m._fs_rename_item.type == "dir" %}
        "{{ m._fs_rename_item.source }}"{{ '' if loop.last else ',' }}
        {% endfor %}
      ]


# This task file is not standalone. It is included or imported from another one
# and will return to it. Further tasks in the parent file will finish the job
# (include_tasks: parents-create.yml) or redo the previous one. To make use of
# this file as standalone (tasks_from: rename.yml), uncomment this task.
#
#- name: "include tasks to create missing parent directories"
#  include_tasks: parents-setup.yml
#  vars:
#    __mountpoints__: |
#      [
#        {% for m in _fs_rename_unmount_.results if m is changed and m._fs_rename_item.type == "dir" %}
#        "{{ m._fs_rename_item.target }}"{{ '' if loop.last else ',' }}
#        {% endfor %}
#      ]
#  when:
#    - filesystems__parents != {}


# The dilemna: when working with system tools that rely on what is exposed by
# the kernel in /proc or /sys, Logical Volume paths are /dev/mapper/VG-LV. This
# is the case of 'df', 'blkid', 'lsblk', ... and so gathered facts. But when
# working with LVM tools, arguments such as /dev/VG/LV or VG/LV or LV VG are
# expected. Kernel compliant format must be translated to LVM format, no choice
# here.
#
- name: "rename Logical Volumes"
  command: |
    lvrename \
    {{ _fs_item.source | basename | regex_replace( '([^-])-([^-])', '\1/\2' ) | regex_replace('--', '-') }} \
    {{ _fs_item.target | basename | regex_replace( '([^-])-([^-])', '\1/\2' ) | regex_replace('--', '-') }}
  loop: "{{ __tempvar0__ }}"
  loop_control:
    loop_var: _fs_item
    label: {
      "old": "{{ _fs_rename_item.source }}",
      "new": "{{ _fs_rename_item.target }}"
      }
  vars:
    __tempvar0__: |
      [
        {% for m in _fs_rename_unmount_.results if m is changed and m._fs_rename_item.type == "dev" %}{
          "source": "{{ m._fs_rename_unmount_item.source }}",
          "target": "{{ m._fs_rename_unmount_item.target }}",
        }{{ '' if loop.last else ',' }}{% endfor %}
      ]
  notify:
    - validate_fstab


# Once it will be done, the next task shouldn't modify the file again. Otherwise
# we could expect duplicated and/or obsolete entries in fstab, that may lead to
# critical issues when rebooting the host.
#
- name: "replace fstab entries"
  replace:
    path: /etc/fstab
    regexp: "(^|\\s){{ _fs_rename_item.source }}(\\s)"
    replace: "\\1{{ _fs_rename_item.target }}\\2"
  loop: "{{ _fs_rename_ | json_query('[?type==`dir`]') }}"
  loop_control:
    loop_var: _fs_rename_item
    label: {
      "move": {
        "old": "{{ _fs_rename_item.source }}",
        "new": "{{ _fs_rename_item.target }}",
        "type": "{{ _fs_rename_item.type }}"
        },
      "keep": {
        "fstype": "{{ _fs_rename_item.fstype }}",
        "path": "{{ _fs_rename_item.new['dir' if _fs_rename_item.type == 'dev' else 'dev'] }}"
        }
      }
  notify:
    - validate_fstab


# This task file is not standalone. It is included or imported from another one
# and will return to it. Further tasks in the parent file will finish the job
# (mount: state=present, or mount: state=absent). To make use of this file as
# standalone (tasks_from: rename.yml), uncomment this task.
#
#- name: "remount renamed devices on their old mountpoints and directories with new names"
#  mount:
#    path: "{{ _fs_rename_item.new.dir }}"
#    src: "{{ _fs_rename_item.new.dev }}"
#    fstype: "{{ _fs_rename_item.fstype }}"
#    state: mounted
#  loop: "{{ _fs_rename_ | sort(attribute='new.dir') }}"
#  loop_control:
#    loop_var: _fs_rename_item
#    label: "{{ _fs_rename_item.target }}"
#  notify:
#    - validate_fstab
