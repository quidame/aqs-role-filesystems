---
# role: filesystems
# file: tasks/state_absent.yml
#
# Tasks to unset filesystems as well as their underlying Logical Volumes.


# This will compare running state (ansible_mounts) with user input variable
# (edf_filesystem_manage_fslist) to know if something is to be renamed. This is the first
# step and builds the variable _fs_rename_.
# after
#
- import_tasks: cross-facts.yml


# The only way to keep consistency when changing the 'path' or the 'lv' value
# is to change it on the host, or fail as soon as possible if not doable.
#
- name: "include tasks to change paths of devices or mountpoints"
  include_tasks: rename.yml
  when:
    - _fs_rename_.0 is defined
    - filesystems__update_paths | bool


- import_tasks: state_unmounted.yml

- name: "remove records in /etc/fstab"
  mount:
    path: "{{ _fs_item.path }}"
    state: absent
  loop: "{{ __fs__dictlist__ }}"
  loop_control:
    loop_var: _fs_item
    label: "{{ _fs_item.path }}"
  notify:
    - reload_systemd
    - validate_fstab


# This avoids to get an already configured filesystem on a new LV starting at
# the same offset on the disk than an old one. More precisely, this avoids to
# inherit an already configured fs and:
# - not be able to mkfs on it, unless using force=yes
# - get a corrupted fs because LV size < FS size
#
- name: "stat filesystems that could be wiped"
  stat:
    follow: yes
    get_attributes: no
    get_checksum: no
    get_mime: no
    path: "{{ _fs_item.device }}"
  loop: "{{ __fs__dictlist__ }}"
  loop_control:
    loop_var: _fs_item
    label: "{{ _fs_item.device }}"
  register: _fs_wipefs_stat_


- name: "wipe filesystem signatures"
  command: |
    wipefs --all {{ '--no-act' if ansible_check_mode else '' }}
    {{ '--force' if _fs_item in __fs__dictlist__|json_query('[?force_wipe].device') else '' }}
    {{ _fs_item }}
  loop: "{{ __tempvar0__ }}"
  loop_control:
    loop_var: _fs_item
  register: _fs_wipefs_
  changed_when: _fs_wipefs_.rc == 0
  failed_when: _fs_wipefs_.rc > 1
  vars:
    __tempvar0__: |
      [
        {% for x in _fs_wipefs_stat_.results if x.stat.exists and x.stat.isblk %}
        "{{ x.stat.path }}"{{ '' if loop.last else ',' }}{% endfor %}
      ]
  notify:
    - validate_fstab


# At this step, we can force the removal of the LV without risk.
#
- name: "remove Logical Volumes"
  lvol:
    lv: "{{ _fs_item.lv }}"
    vg: "{{ _fs_item.vg }}"
    state: absent
    force: yes
  loop: "{{ __fs__dictlist__ }}"
  loop_control:
    loop_var: _fs_item
    label:
      vg: "{{ _fs_item.vg }}"
      lv: "{{ _fs_item.lv }}"
  notify:
    - validate_fstab


# The mountpoint has been removed. Maybe its parent is empty now, so remove it
# too, and its parent, etc.
#
- import_tasks: parents-unset.yml
  vars:
    __mountpoints__: "{{ __fs__dictlist__ | json_query('[*].path') }}"
