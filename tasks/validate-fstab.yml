---
# role: filesystems
# file: tasks/validate-fstab.yml
#
# Tasks to ensure the host will not be rebooted if it is not rebootable due to
# inconsistancies in /etc/fstab.


# At first, retrieve relevant fstab contents.
- name: "get list of static mounts recorded in /etc/fstab"
  command: awk '/^\s*[^#]/ {print $1,$2,$3,$4,$5,$6}' /etc/fstab
  register: fstab_awk
  changed_when: false
  check_mode: false


# This will prevent looping over long lists in the 'stat' task below. The cost
# of 'setup' with a filter is probably much less. We will assume that mount
# points (but not devices) in ansible_mounts don't need to be stat'd to ensure
# they exist.
- name: "regather fact 'ansible_mounts'"
  setup:
    filter: ansible_mounts


- name: "validate fstab entries"
  block:

    - name: "(python2) preset fstab assertions"
      set_fact:
        fstab_assertions_for_python2: "{{ fstab_assertions }}"
      when: ansible_playbook_python | basename is not match('python3')


    - name: "track duplicates, unpredictable names and bad fstypes in /etc/fstab"
      assert:
        that: "{{ fstab_assertions_for_python2 | d(fstab_assertions) }}"
        quiet: yes


    - name: "check that devices and mountpoints recorded in /etc/fstab exist"
      stat:
        path: "{{ fstab_item }}"
        follow: yes
      loop: "{{ ( fstab_mountpoints + fstab_devicelinks )
                | difference(ansible_mounts | json_query('[*].mount')) }}"
      loop_control:
        loop_var: fstab_item
      register: fstab_path
      failed_when:
        - ( not fstab_path.stat.exists ) or
          not ( fstab_path.stat.isdir or fstab_path.stat.isblk )
      when:
        # This will skip mountpoint for swap devices but not the device itself,
        # and skip device for nfs mounts, but not the mountpoint itself.
        - fstab_item is match('/')


    # Perform a real mount call, that is the only way at this step to ensure
    # the file will not crash the system boot.
    - name: "validate fstab records by performing actual mount calls (-o remount)"
      shell: |
        if mountpoint "{{ fstab_item.mount }}"
        then mount "{{ fstab_item.mount }}" -o remount
        else mount "{{ fstab_item.mount }}" && exit 99
        fi
      args:
        warn: false
      loop: "{{ fstab_dicts }}"
      loop_control:
        loop_var: fstab_item
        label: "{{ fstab_item.mount }}"
      register: fstab_remount
      failed_when:  fstab_remount.rc not in [0, 99]
      changed_when: fstab_remount.rc == 99
      when:
        - fstab_item.fstype not in ["swap", "nfs4"]

  rescue:

    - name: "show fstab entries"
      debug:
        var: fstab_awk.stdout_lines

    - name: "fail unconditionally due to previous error"
      fail:
        msg: "THE SYSTEM FILE /etc/fstab SEEMS TO BE IN BAD SHAPE. \
          PLEASE FIX IT BEFORE ATTEMPTING TO REBOOT THE SYSTEM, \
          OTHERWISE YOU MAY EXPERIENCE PROBLEMS AS YOUR SYSTEM \
          IS NOT GUARANTEED TO BOOT CORRECTLY."

  vars:
    # Translate flat fstab content into a dictlist with an additional field
    # (the "link" is to stat devices recorded as UUID=* or LABEL=* in fstab).
    fstab_dicts: |
      [
        {% for fs in fstab_awk.stdout_lines %}{
          "device":  "{{ fs.split(' ').0 }}",
          "mount":   "{{ fs.split(' ').1 }}",
          "fstype":  "{{ fs.split(' ').2 }}",
          "options": "{{ fs.split(' ').3 }}",
          "dump":    "{{ fs.split(' ').4 }}",
          "passno":  "{{ fs.split(' ').5 }}",
          "link": {% if fs.split( ' ' ).0 is match('UUID=') %}
            "{{ fs.split(' ').0 | replace('UUID=', '/dev/disk/by-uuid/') }}"
            {% elif fs.split( ' ' ).0 is match('LABEL=') %}
            "{{ fs.split(' ').0 | replace('LABEL=', '/dev/disk/by-label/') }}"
            {% else %}
            "{{ fs.split(' ').0 }}"
            {% endif %}
        }{{ '' if loop.last else ',' }}
        {% endfor %}
      ]

    fstab_filesystems: "{{ fstab_dicts | json_query('[*].device') }}"
    fstab_mountpoints: "{{ fstab_dicts | json_query('[*].mount') }}"
    fstab_devicelinks: "{{ fstab_dicts | json_query('[*].link') }}"
