---
# role: filesystems
# file: tasks/setup.yml
#
# Tasks to setup filesystems.
# Each task should be clearly named, with no inventory variable in the name.


# This block is added to work around restrictive umasks and grant access to
# the filesystem (to be created) to its owner.
- name: "include tasks to create parent directories with non-default properties"
  include_tasks: parentdirs-create.yml
  when: filesystems__parents|default({}) != {}


# Only one parameter is mandatory, the LV name. Others are either omitted if
# possible, or provided with a default value. But note that all parameters of
# the module are supported, if necessary.
- name: "create Logical Volumes"
  lvol:
    lv:       "{{ lv.lv }}"
    vg:       "{{ lv.vg        | default(filesystems__vg) }}"
    size:     "{{ lv.size      | default(filesystems__size) }}"
    force:    "{{ lv.force     | default(filesystems__force     | default(omit)) }}"
    opts:     "{{ lv.lvol_opts | default(filesystems__lvol_opts | default(omit)) }}"
    pvs:      "{{ lv.pvs       | default(filesystems__pvs       | default(omit)) }}"
    resizefs: "{{ lv.resizefs  | default(filesystems__resizefs  | default(omit)) }}"
    shrink:   "{{ lv.shrink    | default(filesystems__shrink    | default(omit)) }}"
    state: present
  loop: "{{ filesystems__list }}"
  loop_control:
    loop_var: lv
    # As the filesystems__list dictionnaries support a lot of keys, we
    # keep only the most relevant against the name of the task.
    label: "{{ lv.vg | default(filesystems__vg) }}/{{ lv.lv }}"


# Again, there is only one mandatory parameter, that is the same as above. We
# use /dev/VG/LV path scheme here, because it's simpler to build than DM scheme
# /dev/mapper/VG-LV.
- name: "create filesystems on Logical Volumes"
  filesystem:
    dev:      "/dev/{{ fs.vg   | default(filesystems__vg) }}/{{ fs.lv }}"
    fstype:   "{{ fs.fstype    | default(filesystems__fstype) }}"
    force:    "{{ fs.force     | default(filesystems__force     | default(omit)) }}"
    opts:     "{{ fs.mkfs_opts | default(filesystems__mkfs_opts | default(omit)) }}"
    resizefs: "{{ fs.resizefs  | default(filesystems__resizefs  | default(omit)) }}"
  loop: "{{ filesystems__list | sort(attribute='lv') }}"
  loop_control:
    loop_var: fs
    label: {
      "fstype": "{{ fs.fstype | default(filesystems__fstype) }}",
      "dev": "/dev/{{ fs.vg | default(filesystems__vg) }}/{{ fs.lv }}"
      }


# This task introduces a new mandatory parameter, that is the absolute path of
# the mountpoint. THe third parameter that is mandatory for the module is given
# a default value by the role.
# We use /dev/mapper/VG-LV path scheme here becausea of kernel compliance: this
# is always this path scheme that is exposed by the kernel in /proc/mounts and
# by other tools such as lsblk and blkid, so it should be considered canonical
# to populate fstab with. Also, directory names are made canonical too for the
# same raeson.
# The list is sorted against the mountpoints to ensure nested mounts are done in
# the right order.
- name: "mount filesystems and register them in fstab"
  mount:
    path:   "{{ fs.path | regex_replace('/$', '') }}"
    src:    "/dev/mapper/{{ fs.vg | default(filesystems__vg) | regex_replace('-', '--') }}-{{ fs.lv | regex_replace('-', '--') }}"
    fstype: "{{ fs.fstype    | default(filesystems__fstype) }}"
    opts:   "{{ fs.mountopts | default(filesystems__mountopts | default(omit)) }}"
    dump:   "{{ fs.dump      | default(filesystems__dump      | default(omit)) }}"
    passno: "{{ fs.passno    | default(filesystems__passno    | default(omit)) }}"
    backup: "{{ fs.backup    | default(filesystems__backup    | default(omit)) }}"
    state: mounted
  loop: "{{ filesystems__list | sort(attribute='path') }}"
  loop_control:
    loop_var: fs
    label: {
      "src": "/dev/mapper/{{ fs.vg | default(filesystems__vg) | regex_replace('-', '--') }}-{{ fs.lv | regex_replace('-', '--') }}",
      "path": "{{ fs.path | regex_replace('/$', '') }}"
      }
  notify:
    - reload_systemd


# Again, we just reuse the same mandatory parameter as above.
- name: "update access permissions to the roots of filesystems"
  file:
    path:    "{{ dir.path | regex_replace('/$', '') }}"
    attr:    "{{ dir.attr    | default(filesystems__attr    | default(omit)) }}"
    mode:    "{{ dir.mode    | default(filesystems__mode    | default(omit)) }}"
    owner:   "{{ dir.owner   | default(filesystems__owner   | default(omit)) }}"
    group:   "{{ dir.group   | default(filesystems__group   | default(omit)) }}"
    selevel: "{{ dir.selevel | default(filesystems__selevel | default(omit)) }}"
    serole:  "{{ dir.serole  | default(filesystems__serole  | default(omit)) }}"
    setype:  "{{ dir.setype  | default(filesystems__setype  | default(omit)) }}"
    seuser:  "{{ dir.seuser  | default(filesystems__seuser  | default(omit)) }}"
    state: directory
  loop: "{{ filesystems__list }}"
  loop_control:
    loop_var: dir
